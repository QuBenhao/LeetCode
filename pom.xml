<?xml version="1.0" encoding="UTF-8" ?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
>
    <modelVersion>4.0.0</modelVersion>
    <groupId>LeetCode.qubhjava</groupId>
    <artifactId>qubhjava</artifactId>
    <version>2.0.0</version>
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.release>21</maven.compiler.release>
        <javafx.version>21</javafx.version>
        <javafx.maven.plugin.version>0.0.8</javafx.maven.plugin.version>
    </properties>

    <dependencies>
        <!--   log     -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>2.0.13</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-core</artifactId>
            <version>[1.5.13,)</version>
        </dependency>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>[1.5.13,)</version>
        </dependency>
        <!--   json     -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>2.0.31</version>
        </dependency>
        <!--   javafx Pair     -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <!--   test     -->
        <dependency>
            <groupId>org.testng</groupId>
            <artifactId>testng</artifactId>
            <version>7.7.1</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <version>5.10.0</version>
            <scope>compile</scope>
        </dependency>
        <!-- dot env -->
        <dependency>
            <groupId>io.github.cdimascio</groupId>
            <artifactId>dotenv-java</artifactId>
            <version>3.0.0</version>
        </dependency>
    </dependencies>
    <build>
        <plugins>

            <!-- Groovy脚本执行器 -->
            <plugin>
                <groupId>org.codehaus.gmavenplus</groupId>
                <artifactId>gmavenplus-plugin</artifactId>
                <version>4.2.0</version>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.groovy</groupId>
                        <artifactId>groovy-all</artifactId>
                        <version>3.0.25</version>
                        <type>pom</type>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>parse-config</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                          <scripts>
                                <script><![CDATA[
                                import groovy.json.JsonSlurper
                                import java.nio.file.*

                                // 1. 读取.env文件
                                def envFile = new File("${project.basedir}/.env")
                                def baseDir = "problems"
                                if (envFile.exists()) {
                                    envFile.eachLine { line ->
                                        if (line.startsWith("PROBLEMS_FOLDER=")) {
                                            baseDir = line.split("=")[1].trim()
                                        }
                                    }
                                }

                                // 2. 读取config.json
                                def configFile = new File("${project.basedir}/daily-${baseDir}.json")
                                if (!configFile.exists()) {
                                    throw new RuntimeException("Config file not found: ${configFile.absolutePath}")
                                }
                                def config = new JsonSlurper().parse(configFile)

                                // 3. 构建源目录列表
                                def sources = [] as Set
                                sources.add(new File(project.basedir, "${baseDir}/${baseDir}_${config.daily}/").absolutePath)
                                for (int i = 0; i < config.plans.size(); i += 2) {
                                    def problem = config.plans[i]
                                    def folder = config.plans[i + 1]
                                    sources.add(new File(project.basedir, "${folder}/${folder}_${problem}/").absolutePath)
                                }

                                println "==> 添加动态源目录:"
                                sources.each { println "  - $it" }

                                // 4. 设置Maven属性
                                sources.eachWithIndex { source, index ->
                                    project.properties["dynamic.source${index + 1}"] = source
                                }
                                // 5. 补全10个
                                (sources.size()..9).each { index ->
                                    project.properties["dynamic.source${index + 1}"] = "qubhjava"
                                }
                                ]]></script>
                            </scripts>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <!-- 添加动态源目录插件 -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.6.1</version>
                <executions>
                    <execution>
                        <id>add-problem-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${dynamic.source1}</source>
                                <source>${dynamic.source2}</source>
                                <source>${dynamic.source3}</source>
                                <source>${dynamic.source4}</source>
                                <source>${dynamic.source5}</source>
                                <source>${dynamic.source6}</source>
                                <source>${dynamic.source7}</source>
                                <source>${dynamic.source8}</source>
                                <source>${dynamic.source9}</source>
                                <source>${dynamic.source10}</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.5</version>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.maven.plugin.version}</version>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.13.0</version>
                <configuration>
                    <source>21</source>
                    <target>21</target>
                    <excludes>
                        <exclude>bazel-*/**</exclude>
                        <exclude>external/**</exclude>
                    </excludes>
                </configuration>
            </plugin>
        </plugins>
        <sourceDirectory>qubhjava</sourceDirectory>
        <testSourceDirectory>qubhjava/test</testSourceDirectory>
    </build>
</project>
